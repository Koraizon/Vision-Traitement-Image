Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1682601379815)
+++ b/.idea/vcs.xml	(date 1682601379815)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/isilimageprocessing/IsilImageProcessing.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package isilimageprocessing;\n\nimport CImage.*;\nimport CImage.Exceptions.*;\nimport CImage.Observers.*;\nimport CImage.Observers.Events.*;\nimport ImageProcessing.Complexe.MatriceComplexe;\nimport ImageProcessing.Fourier.Fourier;\nimport ImageProcessing.Histogramme.Histogramme;\nimport isilimageprocessing.Dialogues.*;\nimport java.awt.*;\nimport java.io.*;\nimport javax.swing.*;\nimport org.jfree.chart.ChartFactory;\nimport org.jfree.chart.ChartFrame;\nimport org.jfree.chart.JFreeChart;\nimport org.jfree.chart.axis.ValueAxis;\nimport org.jfree.chart.plot.PlotOrientation;\nimport org.jfree.chart.plot.XYPlot;\nimport org.jfree.data.xy.XYSeries;\nimport org.jfree.data.xy.XYSeriesCollection;\n\n\npublic class IsilImageProcessing extends javax.swing.JFrame implements ClicListener,SelectLigneListener,SelectRectListener,SelectRectFillListener,SelectCercleListener,SelectCercleFillListener {\n    private CImageRGB imageRGB;\n    private CImageNG  imageNG;\n\n    private JLabelBeanCImage observer;\n    private Color couleurPinceauRGB;\n    private int   couleurPinceauNG;\n\n    /** Creates new form TestCImage2 */\n    public IsilImageProcessing() {\n        initComponents();\n\n        imageRGB = null;\n        imageNG  = null;\n\n        observer = new JLabelBeanCImage();\n        observer.addClicListener(this);\n        observer.addSelectLigneListener(this);\n        observer.addSelectRectListener(this);\n        observer.addSelectRectFillListener(this);\n        observer.addSelectCercleListener(this);\n        observer.addSelectCercleFillListener(this);\n        observer.setMode(JLabelBeanCImage.INACTIF);\n        jScrollPane.setViewportView(observer);\n\n        jMenuDessiner.setEnabled(false);\n        jMenuFourier.setEnabled(false);\n        jMenuHistogramme.setEnabled(false);\n\n        couleurPinceauRGB = Color.BLACK;\n        couleurPinceauNG = 0;\n    }\n\n    /** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    // <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">//GEN-BEGIN:initComponents\n    private void initComponents() {\n        buttonGroupDessiner = new javax.swing.ButtonGroup();\n        jScrollPane = new javax.swing.JScrollPane();\n        jMenuBar1 = new javax.swing.JMenuBar();\n        jMenuImage = new javax.swing.JMenu();\n        jMenuNouvelle = new javax.swing.JMenu();\n        jMenuItemNouvelleRGB = new javax.swing.JMenuItem();\n        jMenuItemNouvelleNG = new javax.swing.JMenuItem();\n        jMenuOuvrir = new javax.swing.JMenu();\n        jMenuItemOuvrirRGB = new javax.swing.JMenuItem();\n        jMenuItemOuvrirNG = new javax.swing.JMenuItem();\n        jMenuItemEnregistrerSous = new javax.swing.JMenuItem();\n        jSeparator1 = new javax.swing.JSeparator();\n        jMenuQuitter = new javax.swing.JMenuItem();\n        jMenuDessiner = new javax.swing.JMenu();\n        jMenuItemCouleurPinceau = new javax.swing.JMenuItem();\n        jSeparator2 = new javax.swing.JSeparator();\n        jCheckBoxMenuItemDessinerPixel = new javax.swing.JCheckBoxMenuItem();\n        jCheckBoxMenuItemDessinerLigne = new javax.swing.JCheckBoxMenuItem();\n        jCheckBoxMenuItemDessinerRectangle = new javax.swing.JCheckBoxMenuItem();\n        jCheckBoxMenuItemDessinerRectanglePlein = new javax.swing.JCheckBoxMenuItem();\n        jCheckBoxMenuItemDessinerCercle = new javax.swing.JCheckBoxMenuItem();\n        jCheckBoxMenuItemDessinerCerclePlein = new javax.swing.JCheckBoxMenuItem();\n        jMenuFourier = new javax.swing.JMenu();\n        jMenuFourierAfficher = new javax.swing.JMenu();\n        jMenuItemFourierAfficherModule = new javax.swing.JMenuItem();\n        jMenuItemFourierAfficherPhase = new javax.swing.JMenuItem();\n        jMenuItemFourierAfficherPartieReelle = new javax.swing.JMenuItem();\n        jMenuItemFourierAfficherPartieImaginaire = new javax.swing.JMenuItem();\n        jMenuHistogramme = new javax.swing.JMenu();\n        jMenuHistogrammeAfficher = new javax.swing.JMenuItem();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        setTitle(\"TestCImage3\");\n\n        System.out.println(System.getProperty(\"user.dir\"));\n\n//        jMenuImage.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"src/main/java/Icones/Net 13_p1.jpg\")));\n        jMenuImage.setText(\"Image\");\n//        jMenuNouvelle.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"src/main/java/Icones/File 65_p3.jpg\")));\n        jMenuNouvelle.setText(\"Nouvelle\");\n        jMenuItemNouvelleRGB.setText(\"Image RGB\");\n        jMenuItemNouvelleRGB.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jMenuItemNouvelleRGBActionPerformed(evt);\n            }\n        });\n\n        jMenuNouvelle.add(jMenuItemNouvelleRGB);\n\n        jMenuItemNouvelleNG.setText(\"Image NG\");\n        jMenuItemNouvelleNG.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jMenuItemNouvelleNGActionPerformed(evt);\n            }\n        });\n\n        jMenuNouvelle.add(jMenuItemNouvelleNG);\n\n        jMenuImage.add(jMenuNouvelle);\n\n//        jMenuOuvrir.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"src/main/java/Icones/Folder 036_p3.jpg\")));\n        jMenuOuvrir.setText(\"Ouvrir\");\n        jMenuItemOuvrirRGB.setText(\"Image RGB\");\n        jMenuItemOuvrirRGB.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jMenuItemOuvrirRGBActionPerformed(evt);\n            }\n        });\n\n        jMenuOuvrir.add(jMenuItemOuvrirRGB);\n\n        jMenuItemOuvrirNG.setText(\"Image NG\");\n        jMenuItemOuvrirNG.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jMenuItemOuvrirNGActionPerformed(evt);\n            }\n        });\n\n        jMenuOuvrir.add(jMenuItemOuvrirNG);\n\n        jMenuImage.add(jMenuOuvrir);\n\n//        jMenuItemEnregistrerSous.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"src/main/java/Icones/DD 27_p3.jpg\")));\n        jMenuItemEnregistrerSous.setText(\"Enregistrer sous...\");\n        jMenuItemEnregistrerSous.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jMenuItemEnregistrerSousActionPerformed(evt);\n            }\n        });\n\n        jMenuImage.add(jMenuItemEnregistrerSous);\n\n        jMenuImage.add(jSeparator1);\n\n//        jMenuQuitter.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"src/main/java/Icones/CP 59_p3.jpg\")));\n        jMenuQuitter.setText(\"Quitter\");\n        jMenuQuitter.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jMenuQuitterActionPerformed(evt);\n            }\n        });\n\n        jMenuImage.add(jMenuQuitter);\n\n        jMenuBar1.add(jMenuImage);\n\n//        jMenuDessiner.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"src/main/java/Icones/Display 28_p1.jpg\")));\n        jMenuDessiner.setText(\"Dessiner\");\n//        jMenuItemCouleurPinceau.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"src/main/java/Icones/Display 14_p3.jpg\")));\n        jMenuItemCouleurPinceau.setText(\"Couleur\");\n        jMenuItemCouleurPinceau.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jMenuItemCouleurPinceauActionPerformed(evt);\n            }\n        });\n\n        jMenuDessiner.add(jMenuItemCouleurPinceau);\n\n        jMenuDessiner.add(jSeparator2);\n\n        jCheckBoxMenuItemDessinerPixel.setText(\"Pixel\");\n        jCheckBoxMenuItemDessinerPixel.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jCheckBoxMenuItemDessinerPixelActionPerformed(evt);\n            }\n        });\n\n        jMenuDessiner.add(jCheckBoxMenuItemDessinerPixel);\n\n        jCheckBoxMenuItemDessinerLigne.setText(\"Ligne\");\n        jCheckBoxMenuItemDessinerLigne.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jCheckBoxMenuItemDessinerLigneActionPerformed(evt);\n            }\n        });\n\n        jMenuDessiner.add(jCheckBoxMenuItemDessinerLigne);\n\n        jCheckBoxMenuItemDessinerRectangle.setText(\"Rectangle\");\n        jCheckBoxMenuItemDessinerRectangle.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jCheckBoxMenuItemDessinerRectangleActionPerformed(evt);\n            }\n        });\n\n        jMenuDessiner.add(jCheckBoxMenuItemDessinerRectangle);\n\n        jCheckBoxMenuItemDessinerRectanglePlein.setText(\"Rectangle plein\");\n        jCheckBoxMenuItemDessinerRectanglePlein.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jCheckBoxMenuItemDessinerRectanglePleinActionPerformed(evt);\n            }\n        });\n\n        jMenuDessiner.add(jCheckBoxMenuItemDessinerRectanglePlein);\n\n        jCheckBoxMenuItemDessinerCercle.setText(\"Cercle\");\n        jCheckBoxMenuItemDessinerCercle.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jCheckBoxMenuItemDessinerCercleActionPerformed(evt);\n            }\n        });\n\n        jMenuDessiner.add(jCheckBoxMenuItemDessinerCercle);\n\n        jCheckBoxMenuItemDessinerCerclePlein.setText(\"Cercle plein\");\n        jCheckBoxMenuItemDessinerCerclePlein.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jCheckBoxMenuItemDessinerCerclePleinActionPerformed(evt);\n            }\n        });\n\n        jMenuDessiner.add(jCheckBoxMenuItemDessinerCerclePlein);\n\n        jMenuBar1.add(jMenuDessiner);\n\n//        jMenuFourier.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"src/main/java/Icones/CP 51_p1.jpg\")));\n        jMenuFourier.setText(\"Fourier\");\n//        jMenuFourierAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"src/main/java/Icones/CP 51_p3.jpg\")));\n        jMenuFourierAfficher.setText(\"Afficher\");\n        jMenuItemFourierAfficherModule.setText(\"Module\");\n        jMenuItemFourierAfficherModule.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jMenuItemFourierAfficherModuleActionPerformed(evt);\n            }\n        });\n\n        jMenuFourierAfficher.add(jMenuItemFourierAfficherModule);\n\n        jMenuItemFourierAfficherPhase.setText(\"Phase\");\n        jMenuItemFourierAfficherPhase.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jMenuItemFourierAfficherPhaseActionPerformed(evt);\n            }\n        });\n\n        jMenuFourierAfficher.add(jMenuItemFourierAfficherPhase);\n\n        jMenuItemFourierAfficherPartieReelle.setText(\"Partie Reelle\");\n        jMenuItemFourierAfficherPartieReelle.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jMenuItemFourierAfficherPartieReelleActionPerformed(evt);\n            }\n        });\n\n        jMenuFourierAfficher.add(jMenuItemFourierAfficherPartieReelle);\n\n        jMenuItemFourierAfficherPartieImaginaire.setText(\"Partie Imaginaire\");\n        jMenuItemFourierAfficherPartieImaginaire.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jMenuItemFourierAfficherPartieImaginaireActionPerformed(evt);\n            }\n        });\n\n        jMenuFourierAfficher.add(jMenuItemFourierAfficherPartieImaginaire);\n\n        jMenuFourier.add(jMenuFourierAfficher);\n\n        jMenuBar1.add(jMenuFourier);\n\n//        jMenuHistogramme.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"src/main/java/Icones/report_48_hot.jpg\")));\n        jMenuHistogramme.setText(\"Histogramme\");\n//        jMenuHistogrammeAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"src/main/java/Icones/report_32_hot.jpg\")));\n        jMenuHistogrammeAfficher.setText(\"Afficher\");\n        jMenuHistogrammeAfficher.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jMenuHistogrammeAfficherActionPerformed(evt);\n            }\n        });\n\n        jMenuHistogramme.add(jMenuHistogrammeAfficher);\n\n        jMenuBar1.add(jMenuHistogramme);\n\n        setJMenuBar(jMenuBar1);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addGroup(layout.createSequentialGroup()\n                                .addContainerGap()\n                                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)\n                                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addGroup(layout.createSequentialGroup()\n                                .addContainerGap()\n                                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)\n                                .addContainerGap())\n        );\n        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();\n        setBounds((screenSize.width-500)/2, (screenSize.height-400)/2, 500, 400);\n    }// </editor-fold>//GEN-END:initComponents\n\n    private void jMenuHistogrammeAfficherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeAfficherActionPerformed\n        int histo[];\n        try {\n            int f_int[][] = imageNG.getMatrice();\n            histo = Histogramme.Histogramme256(f_int);\n        }\n        catch (CImageNGException ex) {\n            System.out.println(\"Erreur CImageNG : \" + ex.getMessage());\n            return;\n        }\n\n        // Cr�ation du dataset\n        XYSeries serie = new XYSeries(\"Histo\");\n        for(int i=0 ; i<256 ; i++) serie.add(i,histo[i]);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(serie);\n\n        // Creation du chart\n        JFreeChart chart = ChartFactory.createHistogram(\"Histogramme\",\"Niveaux de gris\",\"Nombre de pixels\",dataset,PlotOrientation.VERTICAL,false,false,false);\n\n        XYPlot plot = (XYPlot)chart.getXYPlot();\n        ValueAxis axeX = plot.getDomainAxis();\n        axeX.setRange(0,255);\n        plot.setDomainAxis(axeX);\n\n        // creation d'une frame\n        ChartFrame frame = new ChartFrame(\"Histogramme de l'image\",chart);\n        frame.pack();\n        frame.setVisible(true);\n    }//GEN-LAST:event_jMenuHistogrammeAfficherActionPerformed\n\n    private void activeMenusNG() {\n        jMenuDessiner.setEnabled(true);\n        jMenuFourier.setEnabled(true);\n        jMenuHistogramme.setEnabled(true);\n    }\n\n    private void activeMenusRGB() {\n        jMenuDessiner.setEnabled(true);\n        jMenuFourier.setEnabled(false);\n        jMenuHistogramme.setEnabled(false);\n    }\n\n    private void jCheckBoxMenuItemDessinerCerclePleinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerCerclePleinActionPerformed\n        if (!jCheckBoxMenuItemDessinerCerclePlein.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);\n        else {\n            jCheckBoxMenuItemDessinerPixel.setSelected(false);\n            jCheckBoxMenuItemDessinerLigne.setSelected(false);\n            jCheckBoxMenuItemDessinerRectangle.setSelected(false);\n            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);\n            jCheckBoxMenuItemDessinerCercle.setSelected(false);\n            jCheckBoxMenuItemDessinerCerclePlein.setSelected(true);\n            observer.setMode(JLabelBeanCImage.SELECT_CERCLE_FILL);\n        }\n    }//GEN-LAST:event_jCheckBoxMenuItemDessinerCerclePleinActionPerformed\n\n    private void jCheckBoxMenuItemDessinerCercleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerCercleActionPerformed\n        if (!jCheckBoxMenuItemDessinerCercle.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);\n        else\n        {\n            jCheckBoxMenuItemDessinerPixel.setSelected(false);\n            jCheckBoxMenuItemDessinerLigne.setSelected(false);\n            jCheckBoxMenuItemDessinerRectangle.setSelected(false);\n            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);\n            jCheckBoxMenuItemDessinerCercle.setSelected(true);\n            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);\n            observer.setMode(JLabelBeanCImage.SELECT_CERCLE);\n        }\n    }//GEN-LAST:event_jCheckBoxMenuItemDessinerCercleActionPerformed\n\n    private void jMenuItemFourierAfficherPartieImaginaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed\n        try {\n            int f_int[][] = imageNG.getMatrice();\n            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];\n            for(int i=0 ; i<imageNG.getLargeur() ; i++)\n                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);\n\n            System.out.println(\"Debut Fourier\");\n            MatriceComplexe fourier = Fourier.Fourier2D(f);\n            System.out.println(\"Fin Fourier\");\n            fourier = Fourier.decroise(fourier);\n            double partieImaginaire[][] = fourier.getPartieImaginaire();\n\n            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,partieImaginaire,\"Fourier : Affichage de la partie imaginaire\");\n            dialog.setVisible(true);\n        }\n        catch (CImageNGException ex) {\n            System.out.println(\"Erreur CImageNG : \" + ex.getMessage());\n        }\n    }//GEN-LAST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed\n\n    private void jMenuItemFourierAfficherPartieReelleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieReelleActionPerformed\n        try {\n            int f_int[][] = imageNG.getMatrice();\n            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];\n            for(int i=0 ; i<imageNG.getLargeur() ; i++)\n                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);\n\n            System.out.println(\"Debut Fourier\");\n            MatriceComplexe fourier = Fourier.Fourier2D(f);\n            System.out.println(\"Fin Fourier\");\n            fourier = Fourier.decroise(fourier);\n            double partieReelle[][] = fourier.getPartieReelle();\n\n            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,partieReelle,\"Fourier : Affichage de la partie reelle\");\n            dialog.setVisible(true);\n        }\n        catch (CImageNGException ex) {\n            System.out.println(\"Erreur CImageNG : \" + ex.getMessage());\n        }\n\n    }//GEN-LAST:event_jMenuItemFourierAfficherPartieReelleActionPerformed\n\n    private void jMenuItemFourierAfficherPhaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPhaseActionPerformed\n        try {\n            int f_int[][] = imageNG.getMatrice();\n            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];\n            for(int i=0 ; i<imageNG.getLargeur() ; i++)\n                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);\n\n            System.out.println(\"Debut Fourier\");\n            MatriceComplexe fourier = Fourier.Fourier2D(f);\n            System.out.println(\"Fin Fourier\");\n            fourier = Fourier.decroise(fourier);\n            double phase[][] = fourier.getPhase();\n\n            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,phase,\"Fourier : Affichage de la phase\");\n            dialog.setVisible(true);\n        }\n        catch (CImageNGException ex) {\n            System.out.println(\"Erreur CImageNG : \" + ex.getMessage());\n        }\n\n    }//GEN-LAST:event_jMenuItemFourierAfficherPhaseActionPerformed\n\n    private void jMenuItemFourierAfficherModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherModuleActionPerformed\n        try {\n            int f_int[][] = imageNG.getMatrice();\n            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];\n            for(int i=0 ; i<imageNG.getLargeur() ; i++)\n                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);\n\n            System.out.println(\"Debut Fourier\");\n            MatriceComplexe fourier = Fourier.Fourier2D(f);\n            System.out.println(\"Fin Fourier\");\n            fourier = Fourier.decroise(fourier);\n            double module[][] = fourier.getModule();\n\n            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,module,\"Fourier : Affichage du module\");\n            dialog.setVisible(true);\n        }\n        catch (CImageNGException ex) {\n            System.out.println(\"Erreur CImageNG : \" + ex.getMessage());\n        }\n    }//GEN-LAST:event_jMenuItemFourierAfficherModuleActionPerformed\n\n    private void jCheckBoxMenuItemDessinerPixelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerPixelActionPerformed\n        if (!jCheckBoxMenuItemDessinerPixel.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);\n        else {\n            jCheckBoxMenuItemDessinerPixel.setSelected(true);\n            jCheckBoxMenuItemDessinerLigne.setSelected(false);\n            jCheckBoxMenuItemDessinerRectangle.setSelected(false);\n            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);\n            jCheckBoxMenuItemDessinerCercle.setSelected(false);\n            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);\n            observer.setMode(JLabelBeanCImage.CLIC);\n        }\n    }//GEN-LAST:event_jCheckBoxMenuItemDessinerPixelActionPerformed\n\n    private void jMenuItemEnregistrerSousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEnregistrerSousActionPerformed\n        JFileChooser choix = new JFileChooser();\n        File fichier;\n\n        choix.setCurrentDirectory(new File (\".\"));\n        if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {\n            fichier = choix.getSelectedFile();\n            if (fichier != null) {\n                try {\n                    if (imageRGB != null) imageRGB.enregistreFormatPNG(fichier);\n                    if (imageNG != null) imageNG.enregistreFormatPNG(fichier);\n                }\n                catch (IOException ex) {\n                    System.err.println(\"Erreur I/O : \" + ex.getMessage());\n                }\n            }\n        }\n    }//GEN-LAST:event_jMenuItemEnregistrerSousActionPerformed\n\n    private void jMenuItemOuvrirNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvrirNGActionPerformed\n        JFileChooser choix = new JFileChooser();\n        File fichier;\n\n        choix.setCurrentDirectory(new File (\".\"));\n        if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {\n            fichier = choix.getSelectedFile();\n            if (fichier != null) {\n                try {\n                    imageNG = new CImageNG(fichier);\n                    observer.setCImage(imageNG);\n                    imageRGB = null;\n                    activeMenusNG();\n                }\n                catch (IOException ex) {\n                    System.err.println(\"Erreur I/O : \" + ex.getMessage());\n                }\n            }\n        }\n    }//GEN-LAST:event_jMenuItemOuvrirNGActionPerformed\n\n    private void jMenuItemNouvelleNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNouvelleNGActionPerformed\n        JDialogNouvelleCImageNG dialog = new JDialogNouvelleCImageNG(this,true);\n        dialog.setVisible(true);\n        imageNG = dialog.getCImageNG();\n        observer.setCImage(imageNG);\n        imageRGB = null;\n        activeMenusNG();\n    }//GEN-LAST:event_jMenuItemNouvelleNGActionPerformed\n\n    private void jMenuItemCouleurPinceauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCouleurPinceauActionPerformed\n        if (imageRGB != null) {\n            Color newC = JColorChooser.showDialog(this,\"Couleur du pinceau\",couleurPinceauRGB);\n            if (newC != null) couleurPinceauRGB = newC;\n            observer.setCouleurPinceau(couleurPinceauRGB);\n        }\n\n        if (imageNG != null) {\n            JDialogChoixCouleurNG dialog = new JDialogChoixCouleurNG(this,true,couleurPinceauNG);\n            dialog.setVisible(true);\n            couleurPinceauNG = dialog.getCouleur();\n        }\n    }//GEN-LAST:event_jMenuItemCouleurPinceauActionPerformed\n\n    private void jCheckBoxMenuItemDessinerRectanglePleinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerRectanglePleinActionPerformed\n        if (!jCheckBoxMenuItemDessinerRectanglePlein.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);\n        else {\n            jCheckBoxMenuItemDessinerPixel.setSelected(false);\n            jCheckBoxMenuItemDessinerLigne.setSelected(false);\n            jCheckBoxMenuItemDessinerRectangle.setSelected(false);\n            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(true);\n            jCheckBoxMenuItemDessinerCercle.setSelected(false);\n            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);\n            observer.setMode(JLabelBeanCImage.SELECT_RECT_FILL);\n        }\n    }//GEN-LAST:event_jCheckBoxMenuItemDessinerRectanglePleinActionPerformed\n\n    private void jCheckBoxMenuItemDessinerRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerRectangleActionPerformed\n        if (!jCheckBoxMenuItemDessinerRectangle.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);\n        else {\n            jCheckBoxMenuItemDessinerPixel.setSelected(false);\n            jCheckBoxMenuItemDessinerLigne.setSelected(false);\n            jCheckBoxMenuItemDessinerRectangle.setSelected(true);\n            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);\n            jCheckBoxMenuItemDessinerCercle.setSelected(false);\n            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);\n            observer.setMode(JLabelBeanCImage.SELECT_RECT);\n        }\n    }//GEN-LAST:event_jCheckBoxMenuItemDessinerRectangleActionPerformed\n\n    private void jCheckBoxMenuItemDessinerLigneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerLigneActionPerformed\n        if (!jCheckBoxMenuItemDessinerLigne.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);\n        else {\n            jCheckBoxMenuItemDessinerPixel.setSelected(false);\n            jCheckBoxMenuItemDessinerLigne.setSelected(true);\n            jCheckBoxMenuItemDessinerRectangle.setSelected(false);\n            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);\n            jCheckBoxMenuItemDessinerCercle.setSelected(false);\n            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);\n            observer.setMode(JLabelBeanCImage.SELECT_LIGNE);\n        }\n    }//GEN-LAST:event_jCheckBoxMenuItemDessinerLigneActionPerformed\n\n    private void jMenuItemNouvelleRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNouvelleRGBActionPerformed\n        JDialogNouvelleCImageRGB dialog = new JDialogNouvelleCImageRGB(this,true);\n        dialog.setVisible(true);\n        imageRGB = dialog.getCImageRGB();\n        observer.setCImage(imageRGB);\n        imageNG = null;\n        activeMenusRGB();\n    }//GEN-LAST:event_jMenuItemNouvelleRGBActionPerformed\n\n    private void jMenuQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuQuitterActionPerformed\n        System.exit(0);\n    }//GEN-LAST:event_jMenuQuitterActionPerformed\n\n    private void jMenuItemOuvrirRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvrirRGBActionPerformed\n        JFileChooser choix = new JFileChooser();\n        File fichier;\n\n        choix.setCurrentDirectory(new File (\".\"));\n        if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {\n            fichier = choix.getSelectedFile();\n            if (fichier != null) {\n                try {\n                    imageRGB = new CImageRGB(fichier);\n                    observer.setCImage(imageRGB);\n                    imageNG = null;\n                    activeMenusRGB();\n                }\n                catch (IOException ex) {\n                    System.err.println(\"Erreur I/O : \" + ex.getMessage());\n                }\n            }\n        }\n    }//GEN-LAST:event_jMenuItemOuvrirRGBActionPerformed\n\n\n    public static void main(String args[]) {\n        java.awt.EventQueue.invokeLater(new Runnable() {\n            public void run() {\n                new IsilImageProcessing().setVisible(true);\n            }\n        });\n    }\n\n    public void ClicDetected(UnClicEvent e) {\n        if (jCheckBoxMenuItemDessinerPixel.isSelected()) {\n            try {\n                if (imageRGB != null)\n                    imageRGB.setPixel(e.getX(),e.getY(),couleurPinceauRGB);\n                if (imageNG != null)\n                    imageNG.setPixel(e.getX(),e.getY(),couleurPinceauNG);\n            }\n            catch (CImageRGBException ex)\n            { System.out.println(\"Erreur RGB : \" + ex.getMessage()); }\n            catch (CImageNGException ex)\n            { System.out.println(\"Erreur NG : \" + ex.getMessage()); }\n        }\n    }\n\n    public void SelectLigneDetected(DeuxClicsEvent e) {\n        if (jCheckBoxMenuItemDessinerLigne.isSelected()) {\n            try {\n                if (imageRGB != null)\n                    imageRGB.DessineLigne(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);\n                if (imageNG != null)\n                    imageNG.DessineLigne(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);\n            }\n            catch (CImageRGBException ex)\n            { System.out.println(\"Erreur RGB : \" + ex.getMessage()); }\n            catch (CImageNGException ex)\n            { System.out.println(\"Erreur NG : \" + ex.getMessage()); }\n        }\n    }\n\n    public void SelectRectDetected(DeuxClicsEvent e) {\n        if (jCheckBoxMenuItemDessinerRectangle.isSelected()) {\n            try {\n                if (imageRGB != null)\n                    imageRGB.DessineRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);\n                if (imageNG != null)\n                    imageNG.DessineRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);\n            }\n            catch (CImageRGBException ex)\n            { System.out.println(\"Erreur RGB : \" + ex.getMessage()); }\n            catch (CImageNGException ex)\n            { System.out.println(\"Erreur NG : \" + ex.getMessage()); }\n        }\n    }\n\n    public void SelectCercleDetected(DeuxClicsEvent e) {\n        if (jCheckBoxMenuItemDessinerCercle.isSelected()) {\n            try {\n                if (imageRGB != null)\n                    imageRGB.DessineCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);\n                if (imageNG != null)\n                    imageNG.DessineCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);\n            }\n            catch (CImageRGBException ex)\n            { System.out.println(\"Erreur RGB : \" + ex.getMessage()); }\n            catch (CImageNGException ex)\n            { System.out.println(\"Erreur NG : \" + ex.getMessage()); }\n        }\n    }\n\n    public void SelectCercleFillDetected(DeuxClicsEvent e) {\n        if (jCheckBoxMenuItemDessinerCerclePlein.isSelected()) {\n            try {\n                if (imageRGB != null)\n                    imageRGB.RemplitCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);\n                if (imageNG != null)\n                    imageNG.RemplitCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);\n            }\n            catch (CImageRGBException ex)\n            { System.out.println(\"Erreur RGB : \" + ex.getMessage()); }\n            catch (CImageNGException ex)\n            { System.out.println(\"Erreur NG : \" + ex.getMessage()); }\n        }\n    }\n\n    public void SelectRectFillDetected(DeuxClicsEvent e) {\n        if (jCheckBoxMenuItemDessinerRectanglePlein.isSelected()) {\n            try {\n                if (imageRGB != null)\n                    imageRGB.RemplitRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);\n                if (imageNG != null)\n                    imageNG.RemplitRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);\n            }\n            catch (CImageRGBException ex)\n            { System.out.println(\"Erreur RGB : \" + ex.getMessage()); }\n            catch (CImageNGException ex)\n            { System.out.println(\"Erreur NG : \" + ex.getMessage()); }\n        }\n    }\n\n    // Variables declaration - do not modify//GEN-BEGIN:variables\n    private javax.swing.ButtonGroup buttonGroupDessiner;\n    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerCercle;\n    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerCerclePlein;\n    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerLigne;\n    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerPixel;\n    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerRectangle;\n    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerRectanglePlein;\n    private javax.swing.JMenuBar jMenuBar1;\n    private javax.swing.JMenu jMenuDessiner;\n    private javax.swing.JMenu jMenuFourier;\n    private javax.swing.JMenu jMenuFourierAfficher;\n    private javax.swing.JMenu jMenuHistogramme;\n    private javax.swing.JMenuItem jMenuHistogrammeAfficher;\n    private javax.swing.JMenu jMenuImage;\n    private javax.swing.JMenuItem jMenuItemCouleurPinceau;\n    private javax.swing.JMenuItem jMenuItemEnregistrerSous;\n    private javax.swing.JMenuItem jMenuItemFourierAfficherModule;\n    private javax.swing.JMenuItem jMenuItemFourierAfficherPartieImaginaire;\n    private javax.swing.JMenuItem jMenuItemFourierAfficherPartieReelle;\n    private javax.swing.JMenuItem jMenuItemFourierAfficherPhase;\n    private javax.swing.JMenuItem jMenuItemNouvelleNG;\n    private javax.swing.JMenuItem jMenuItemNouvelleRGB;\n    private javax.swing.JMenuItem jMenuItemOuvrirNG;\n    private javax.swing.JMenuItem jMenuItemOuvrirRGB;\n    private javax.swing.JMenu jMenuNouvelle;\n    private javax.swing.JMenu jMenuOuvrir;\n    private javax.swing.JMenuItem jMenuQuitter;\n    private javax.swing.JScrollPane jScrollPane;\n    private javax.swing.JSeparator jSeparator1;\n    private javax.swing.JSeparator jSeparator2;\n    // End of variables declaration//GEN-END:variables\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/isilimageprocessing/IsilImageProcessing.java b/src/main/java/isilimageprocessing/IsilImageProcessing.java
--- a/src/main/java/isilimageprocessing/IsilImageProcessing.java	(revision 583dd3690044a03c730f3e257b4d00da61b7dba8)
+++ b/src/main/java/isilimageprocessing/IsilImageProcessing.java	(date 1682602038150)
@@ -328,7 +328,7 @@
             return;
         }
 
-        // Cr�ation du dataset
+        // Creation du dataset
         XYSeries serie = new XYSeries("Histo");
         for(int i=0 ; i<256 ; i++) serie.add(i,histo[i]);
         XYSeriesCollection dataset = new XYSeriesCollection();
@@ -387,39 +387,33 @@
         }
     }//GEN-LAST:event_jCheckBoxMenuItemDessinerCercleActionPerformed
 
-    private void jMenuItemFourierAfficherPartieImaginaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed
-        try {
-            int f_int[][] = imageNG.getMatrice();
-            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
-            for(int i=0 ; i<imageNG.getLargeur() ; i++)
-                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
+    private MatriceComplexe getMatriceComplexe() throws CImageNGException {
+        int[][] f_int = imageNG.getMatrice();
+        double[][] f = new double[imageNG.getLargeur()][imageNG.getHauteur()];
+        for (int i = 0; i < imageNG.getLargeur(); i++)
+            for (int j = 0; j < imageNG.getHauteur(); j++)
+                f[i][j] = f_int[i][j];
 
-            System.out.println("Debut Fourier");
-            MatriceComplexe fourier = Fourier.Fourier2D(f);
-            System.out.println("Fin Fourier");
-            fourier = Fourier.decroise(fourier);
-            double partieImaginaire[][] = fourier.getPartieImaginaire();
+        System.out.println("Debut Fourier");
+        MatriceComplexe fourier = Fourier.Fourier2D(f);
+        System.out.println("Fin Fourier");
+        return Fourier.decroise(fourier);
+    }
+
+    private void jMenuItemFourierAfficherPartieImaginaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed
+        try {
+            MatriceComplexe fourier = getMatriceComplexe();
+            double[][] partieImaginaire = fourier.getPartieImaginaire();
 
             JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,partieImaginaire,"Fourier : Affichage de la partie imaginaire");
             dialog.setVisible(true);
-        }
-        catch (CImageNGException ex) {
-            System.out.println("Erreur CImageNG : " + ex.getMessage());
-        }
+        } catch(CImageNGException ex) { System.out.println("Erreur CImageNG : " + ex.getMessage());}
     }//GEN-LAST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed
 
     private void jMenuItemFourierAfficherPartieReelleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieReelleActionPerformed
         try {
-            int f_int[][] = imageNG.getMatrice();
-            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
-            for(int i=0 ; i<imageNG.getLargeur() ; i++)
-                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
-
-            System.out.println("Debut Fourier");
-            MatriceComplexe fourier = Fourier.Fourier2D(f);
-            System.out.println("Fin Fourier");
-            fourier = Fourier.decroise(fourier);
-            double partieReelle[][] = fourier.getPartieReelle();
+            MatriceComplexe fourier = getMatriceComplexe();
+            double[][] partieReelle = fourier.getPartieReelle();
 
             JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,partieReelle,"Fourier : Affichage de la partie reelle");
             dialog.setVisible(true);
@@ -432,16 +426,8 @@
 
     private void jMenuItemFourierAfficherPhaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPhaseActionPerformed
         try {
-            int f_int[][] = imageNG.getMatrice();
-            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
-            for(int i=0 ; i<imageNG.getLargeur() ; i++)
-                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
-
-            System.out.println("Debut Fourier");
-            MatriceComplexe fourier = Fourier.Fourier2D(f);
-            System.out.println("Fin Fourier");
-            fourier = Fourier.decroise(fourier);
-            double phase[][] = fourier.getPhase();
+            MatriceComplexe fourier = getMatriceComplexe();
+            double[][] phase = fourier.getPhase();
 
             JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,phase,"Fourier : Affichage de la phase");
             dialog.setVisible(true);
@@ -454,16 +440,8 @@
 
     private void jMenuItemFourierAfficherModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherModuleActionPerformed
         try {
-            int f_int[][] = imageNG.getMatrice();
-            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
-            for(int i=0 ; i<imageNG.getLargeur() ; i++)
-                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
-
-            System.out.println("Debut Fourier");
-            MatriceComplexe fourier = Fourier.Fourier2D(f);
-            System.out.println("Fin Fourier");
-            fourier = Fourier.decroise(fourier);
-            double module[][] = fourier.getModule();
+            MatriceComplexe fourier = getMatriceComplexe();
+            double[][] module = fourier.getModule();
 
             JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,module,"Fourier : Affichage du module");
             dialog.setVisible(true);
@@ -622,8 +600,7 @@
         }
     }//GEN-LAST:event_jMenuItemOuvrirRGBActionPerformed
 
-
-    public static void main(String args[]) {
+    public static void main(String[] args) {
         java.awt.EventQueue.invokeLater(new Runnable() {
             public void run() {
                 new IsilImageProcessing().setVisible(true);
